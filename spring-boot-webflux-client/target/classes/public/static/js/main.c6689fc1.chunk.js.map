{"version":3,"sources":["models/Option.ts","models/Category.ts","models/Product.ts","Utils.ts","components/ProductEditor.tsx","components/ProductList.tsx","constants.ts","services/ProductService.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Option","option","value","label","undefined","this","optionDefault","Category","category","id","name","Product","product","price","createdAt","picture","Date","clone","something","JSON","parse","stringify","MyDateToString","date","getDay","toString","getMonth","getFullYear","ddMMyyyy","Promise","resolve","reject","ProductEditor","props","categories","productService","state","loading","editing","categoriesOptions","inputName","inputPrice","categoryOptionSelected","formValid","serverGetCategories","then","forEach","getId","getName","push","resetForm","setState","getProductToEdit","subscribe","toEdit","onEditProduct","myThis","setId","setName","setCreatedAt","getCreatedAt","setPrice","getPrice","setCategory","getCategory","setPicture","getPicture","getOptionByValue","find","opti","optionSelected","actionMeta","selectedOp","getCategoryById","getValue","event","target","length","parseFloat","preventDefault","categoryOptSel","serverUpdateProduct","serverAddProduct","serverGetProducts","setNewList","className","role","onSubmit","e","submit","htmlFor","type","onChange","onChangeField","required","max","min","step","options","action","onSelected","disabled","Component","ProductList","productList","getProductList","getNewList","products","updateProductList","productI","addProductToEdit","serverDeleteProduct","deleted","catch","error1","console","error","message","map","index","bigString","substr","dateToString","onClick","clickEditCreditCard","clickDeleteCreditCard","urlRESTAPI","ProductService","productToEdit$","Subject","productList$","fetch","answer","json","categoryList1","categoryJson","error2","productToSave","method","body","headers","productList1","productJson","ok","productToUpdate","next","asObservable","newProductList","App","myProps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAAaA,EAAb,WAKI,WAAYC,GAAY,yBAHjBC,WAGgB,OAFhBC,WAEgB,OACRC,GAARH,GACCI,KAAKH,MAAQ,IACbG,KAAKF,MAAQ,KAGbE,KAAKH,MAAQD,EAAOC,MACpBG,KAAKF,MAAQF,EAAOE,OAZhC,4CAgBI,WACI,OAAOE,KAAKH,QAjBpB,sBAmBI,WACI,OAAOG,KAAKF,UApBpB,KAwBWG,EAAyB,IAAIN,EAAO,CAACE,MAAM,IAAIC,MAAM,KCrBnDI,EAAb,WAKI,WAAYC,GAAgB,yBAHpBC,QAGmB,OAFnBC,UAEmB,OACVN,GAAVI,GACCH,KAAKI,GAAG,GACRJ,KAAKK,KAAK,KAGVL,KAAKI,GAAKD,EAASC,GACnBJ,KAAKK,KAAOF,EAASE,MAZjC,yCAgBI,WACI,OAAOL,KAAKI,KAjBpB,mBAmBI,SAAaP,GACTG,KAAKI,GAAKP,IApBlB,qBAuBI,WACI,OAAOG,KAAKK,OAxBpB,qBA0BI,SAAeR,GACXG,KAAKK,KAAOR,MA3BpB,KCEaS,EAAb,WAQI,WAAYC,GAAe,yBAPnBH,QAOkB,OANlBC,UAMkB,OALlBG,WAKkB,OAJlBC,eAIkB,OAHlBN,cAGkB,OAFlBO,aAEkB,OACVX,GAATQ,GACCP,KAAKI,GAAK,GACVJ,KAAKK,KAAO,GACZL,KAAKQ,MAAQ,EACbR,KAAKS,UAAY,IAAIE,KACrBX,KAAKG,SAAW,IAAID,OAASH,GAC7BC,KAAKU,QAAU,KAEfV,KAAKI,GAAKG,EAAQH,GAClBJ,KAAKK,KAAOE,EAAQF,KACpBL,KAAKQ,MAAQD,EAAQC,MACrBR,KAAKS,UAAYF,EAAQE,UACzBT,KAAKG,SAAW,IAAID,EAASK,EAAQJ,UACrCH,KAAKU,QAAUH,EAAQG,SAtBnC,yCA0BI,WACI,OAAOV,KAAKI,KA3BpB,mBA6BI,SAAaP,GACTG,KAAKI,GAAKP,IA9BlB,qBAgCI,WACI,OAAOG,KAAKK,OAjCpB,qBAmCI,SAAeR,GACXG,KAAKK,KAAOR,IApCpB,sBAsCI,WACI,OAAOG,KAAKQ,QAvCpB,sBAyCI,SAAgBX,GACZG,KAAKQ,MAAQX,IA1CrB,0BA4CI,WACI,OAAOG,KAAKS,YA7CpB,0BA+CI,SAAoBZ,GAChBG,KAAKS,UAAYZ,IAhDzB,yBAkDI,WACI,OAAOG,KAAKG,WAnDpB,yBAqDI,SAAmBN,GACfG,KAAKG,SAAWN,IAtDxB,wBAwDI,WACI,OAAOG,KAAKU,UAzDpB,wBA2DI,SAAkBb,GACdG,KAAKU,QAAUb,MA5DvB,KCLO,SAASe,EAAMC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,IAG9B,IAAeI,EAAtB,WACI,aAAc,oBADlB,qDAEI,SAAoBC,GAChB,YAASnB,GAANmB,EACQ,GAenB,SAAkBA,GACd,OAAGA,aAAgBP,KACRO,EAAKC,SAASC,WAAW,IAAIF,EAAKG,WAAWD,WAAW,IAAIF,EAAKI,cAAcF,WAE/E,GAlBAG,CAASL,KALxB,2BAQI,SAAqBA,GACjB,OAAO,IAAIM,SAAQ,SAASC,EAAQC,GAChCD,EAAQP,EAAKE,mBAVzB,K,WCSqBO,E,kDAKjB,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IALFC,gBAIgB,IAHhBC,oBAGgB,IAFhBvB,aAEgB,EAEpB,EAAKuB,eAAiBF,EAAME,eAC5B,EAAKD,WAAa,GAClB,EAAKtB,QAAU,IAAID,OAAQP,GAC3B,EAAKgC,MAAQ,CACTC,SAAS,EACTC,SAAS,EACTC,kBAAoB,GACpBC,UAAY,GACZC,WAAa,EACbC,uBAAyBpC,EACzBqC,WAAY,GAZI,E,qDAgBxB,WAAoB,IAAD,OACftC,KAAK8B,eAAeS,sBAAsBC,MAAK,SAACX,GAC5C,EAAKA,WAAaA,EAClB,IAAIK,EAA+B,GACnCL,EAAWY,SAAQ,SAACtC,GAChB,IAAIP,EAAkB,IAAID,EAAO,CAACE,MAAMM,EAASuC,QAAS5C,MAAMK,EAASwC,YACzET,EAAkBU,KAAKhD,MAG3B,IAAImC,EAAcnB,EAAM,EAAKmB,OAC7BA,EAAMG,kBAAoBA,EAC1BH,EAAMC,SAAU,EAChB,EAAKa,UAAU,GACf,EAAKC,SAASf,MAElB/B,KAAK8B,eAAeiB,mBAAmBC,WAAU,SAACC,GAAD,OAAkB,EAAKC,cAAcD,EAAO,Q,2BAIjG,SAAsBA,EAAgBE,GAClC,IAAIpB,EAAcnB,EAAMuC,EAAOpB,OAC3BxB,EAAoB4C,EAAO5C,QAC/B4C,EAAON,UAAUM,GACjB5C,EAAQ6C,MAAMH,EAAOP,SACrBnC,EAAQ8C,QAAQJ,EAAON,WACvBpC,EAAQ+C,aAAaL,EAAOM,gBAC5BhD,EAAQiD,SAASP,EAAOQ,YACxBlD,EAAQmD,YAAYT,EAAOU,eAC3BpD,EAAQqD,WAAWX,EAAOY,cAC1B9B,EAAMK,WAAWa,EAAOQ,WACxB1B,EAAMI,UAAUc,EAAON,UACvBZ,EAAMM,uBAAuBc,EAAOW,iBAAiBb,EAAOU,cAAcjB,QAAQS,GAClFpB,EAAMO,WAAY,EAClBP,EAAME,SAAU,EAChBF,EAAMC,SAAU,EAChBhC,KAAK8C,SAASf,K,uBAGlB,SAAkBoB,GACd,IAAIpB,EAAcnB,EAAMuC,EAAOpB,OAC3BxB,EAAoB4C,EAAO5C,QAC/BA,EAAQ6C,MAAM,IACd7C,EAAQ8C,QAAQ,IAChB9C,EAAQ+C,aAAa,IAAI3C,MACzBJ,EAAQiD,SAAS,GACjBjD,EAAQqD,WAAW,IACnBrD,EAAQmD,YAAYP,EAAOtB,WAAW,IACtCE,EAAMK,WAAa,EACnBL,EAAMI,UAAY,GAClBJ,EAAMM,uBAAyBpC,EAC/B8B,EAAMO,WAAY,EAClBP,EAAME,SAAU,EAChBF,EAAMC,SAAU,EAChBmB,EAAOL,SAASf,K,6BAGpB,SAAwB3B,GACpB,IAAID,EAAkCH,KAAK6B,WAAWkC,MAAK,SAAC5D,GAAD,OAAqBA,EAASuC,SAAStC,KAClG,YAAaL,GAAVI,EACQA,EACJ,IAAID,OAASH,K,8BAGxB,SAAyBF,EAAcsD,GACnC,IAAIvD,EAA8BuD,EAAOpB,MAAMG,kBAAkB6B,MAAK,SAACC,GAAD,OAAeA,EAAKnE,OAAOA,KACjG,YAAWE,GAARH,EACQA,EACJK,I,wBAGX,SAAmBgE,EAAqCC,EAAgCf,GACpF,IAAIgB,EAAsB,IAAIxE,EAAOsE,GACjC9D,EAAsBgD,EAAOiB,gBAAgBD,EAAWE,YACxDtC,EAAcnB,EAAMuC,EAAOpB,OAC3BxB,EAAoB4C,EAAO5C,aAClBR,GAAVI,GACCI,EAAQmD,YAAYvD,GACxB4B,EAAMM,uBAAyB4B,EAC/Bd,EAAOL,SAASf,K,2BAGpB,SAAsBuC,EAA6CnB,GAC/D,IAAIpB,EAAcnB,EAAMuC,EAAOpB,OAC3B1B,EAAgBiE,EAAMC,OAAOlE,KAC7BE,EAAoB4C,EAAO5C,QAC3BV,EAAeyE,EAAMC,OAAO1E,MAChC,OAAOQ,GACH,IAAK,WACD0B,EAAMI,UAAUtC,EAChBU,EAAQ8C,QAAQxD,GAChB,MACJ,IAAK,YACD,IAAIW,EAAiBX,EAAM2E,OAAO,EAAEC,WAAW5E,GAAO,EACtDkC,EAAMK,WAAa5B,EACnBD,EAAQiD,SAAShD,GAIzBuB,EAAMO,UAAaP,EAAMI,UAAUqC,OAAO,GAAOzC,EAAMK,WAAW,EAClEe,EAAOL,SAASf,K,2DAGpB,WAAqBuC,EAAyCnB,GAA9D,kFACImB,EAAMI,iBACM9D,EAAMuC,EAAOpB,OACrBxB,EAAoB,IAAID,EAAQM,EAAMuC,EAAO5C,UAC7CC,EAAgB2C,EAAOpB,MAAMK,WAC7B/B,EAAe8C,EAAOpB,MAAMI,UAC5BwC,EAA0B,IAAIhF,EAAOwD,EAAOpB,MAAMM,wBAClDlC,EAAqBgD,EAAOiB,gBAAgBO,EAAeN,YAC/D9D,EAAQ8C,QAAQhD,GAChBE,EAAQiD,SAAShD,GACjBD,EAAQmD,YAAYvD,IAEhBgD,EAAOpB,MAAME,QAZrB,kCAa6BkB,EAAOrB,eAAe8C,oBAAoBrE,GAbvE,wDAe6B4C,EAAOrB,eAAe+C,iBAAiBtE,GAfpE,8BAkBI4C,EAAON,UAAUM,GAlBrB,KAoBIA,EAAOrB,eApBX,UAqBcqB,EAAOrB,eAAegD,oBArBpC,yBAoB0BC,WApB1B,4D,6EAyBA,WAAS,IAAD,OACJ,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAIA,UAAU,aAAd,UACI,kDACChF,KAAK+B,MAAMC,SACR,qBAAKgD,UAAU,2BAA2BC,KAAK,SAA/C,SACI,sBAAMD,UAAU,kBAAhB,6BAIZ,uBAAME,SAAU,SAAAC,GAAC,OAAE,EAAKC,OAAOD,EAAE,IAAjC,UACI,sBAAKH,UAAU,aAAf,UACI,uBAAOK,QAAQ,WAAf,kBACA,uBAAOC,KAAK,OAAOzF,MAAOG,KAAK+B,MAAMI,UAAW6C,UAAU,eAAe5E,GAAG,SACxE,cAAY,SACZmF,SAAU,SAAAJ,GAAC,OAAE,EAAKK,cAAcL,EAAE,IAAO9E,KAAK,WAAWoF,UAAQ,OAEzE,sBAAKT,UAAU,aAAf,UACI,uBAAOK,QAAQ,YAAf,mBACA,uBAAOC,KAAK,SAASzF,MAAOG,KAAK+B,MAAMK,WAAY4C,UAAU,eAAe5E,GAAG,UAC3E,cAAY,UACZmF,SAAU,SAAAJ,GAAC,OAAE,EAAKK,cAAcL,EAAE,IAAO9E,KAAK,YAAYqF,IAAI,SAASC,IAAI,IAAIC,KAAK,aAE5F,sBAAKZ,UAAU,aAAf,UACI,uBAAOK,QAAQ,uBAAf,sBACA,cAAC,IAAD,CAAQQ,QAAS7F,KAAK+B,MAAMG,kBACxBrC,MAAOG,KAAK+B,MAAMM,uBAClB2C,UAAU,eAAe5E,GAAG,qBAAqBC,KAAK,uBACtD,cAAY,qBACZkF,SAAU,SAAC3F,EAA2BkG,GAA5B,OAAwD,EAAKC,WAAWnG,EAAOkG,EAAO,SAExG,qBAAKd,UAAU,eAAf,SACI,yBAAQA,UAAU,yBAAyBM,KAAK,SAAS,cAAY,iBAAiBlF,GAAG,iBACrF4F,UAAWhG,KAAK+B,MAAMO,UAD1B,UAEQ,mBAAG0C,UAAU,oBACZhF,KAAK+B,MAAME,QAAU,cAAe,uB,GAzL9BgE,a,QCHtBC,E,kDAGjB,WAAYtE,GAAa,IAAD,8BACpB,cAAMA,IAHFE,oBAEgB,EAEpB,EAAKA,eAAiBF,EAAME,eAC5B,EAAKC,MAAM,CACPoE,YAAc,IAJE,E,qDAQxB,WAAoB,IAAD,OAEfnG,KAAKoG,eAAepG,MAEpBA,KAAK8B,eAAeuE,aAAarD,WAAU,SAACsD,GAAD,OAAsB,EAAKC,kBAAkBD,EAAS,Q,4BAGrG,SAAuBnD,GAEnBnD,KAAK8B,eAAegD,oBAAoBtC,MAAK,SAAC8D,GAAD,OAAsBnD,EAAOoD,kBAAkBD,EAASnD,Q,+BAGzG,SAA0BmD,EAAoBnD,GAC1CA,EAAOL,SAAS,CACZqD,YAAaG,M,iCAIrB,SAA4BE,EAAoBrD,GAC5CA,EAAOrB,eAAe2E,iBAAiBD,K,mCAG3C,SAA8BA,EAAoBrD,GAClBA,EAAOrB,eAAe4E,oBAAoBF,EAAS9D,SACzDF,MAAM,SAASmE,GAC7BA,GACAxD,EAAOiD,eAAejD,MAG7ByD,OAAM,SAACC,GACJC,QAAQC,MAAMF,EAAOG,c,oBAI7B,WAAS,IAAD,OACJ,OACI,qBAAKhC,UAAU,OAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,QAAd,0BACA,uBAAOA,UAAU,QAAjB,SACA,uBAAO,cAAY,kBAAnB,SACKhF,KAAK+B,MAAMoE,YAAYc,KAAI,SAACT,EAAoBU,GAArB,OACxB,+BACI,8BF7CFC,EE6CqBX,EAAS9D,QF5CjDyE,EAAUC,OAAOD,EAAU3C,OAAO,EAAE,ME6Cf,6BAAKgC,EAAS7D,YACd,6BAAK6D,EAAS/C,WAAWrC,aACzB,6BAAKH,EAAeoG,aAAab,EAASjD,kBAC1C,6BAAKiD,EAAS7C,cAAchB,YAC5B,6BAAK6D,EAAS3C,eACd,+BACI,cAAC,IAAD,CAAamB,UAAU,YACX,cAAa,OAASkC,EAAOI,QAAS,WACtC,EAAKC,oBAAoBf,EAAU,MAE/C,cAAC,IAAD,CAASxB,UAAU,cACP,cAAa,SAAWkC,EAAOI,QAAS,WACxC,EAAKE,sBAAsBhB,EAAU,WAdhD,MAAMU,GF5CpC,IAAuBC,kB,GETWlB,a,QCW3BwB,EAAqB,cCXtBC,EAAb,iDAMYC,eAAoC,IAAIC,IANpD,KAYYC,aAAoC,IAAID,IAZpD,uDAmBK,WACG,OAAO,IAAIpG,SAAQ,SAAUC,EAASC,GAClCoG,MAAML,0BACLjF,MAAK,SAAUuF,GACZ,OAAOA,EAAOC,UAEjBxF,MAAK,SAAUwF,GACZ,IACI,IAAIC,EAA4B,GACdD,EACbvF,SAAQ,SAAUyF,GACnB,IAAI/H,EAAqB,IAAID,EAASgI,GACtCD,EAAcrF,KAAKzC,MAEvBsB,EAAQwG,GACV,MAAOpB,GACLnF,EAAOmF,OAGdD,OAAM,SAACuB,GACJrB,QAAQC,MAAMoB,EAAOnB,SACrBtF,EAAOyG,WAxCvB,8BAkDI,SAAwBC,GAmBpB,YAjBqBrI,GAAjBqI,EACc5G,QAAQE,OAAO,mCAEfoG,MACVL,EACA,CACIY,OAAQ,OACRC,KAAMxH,KAAKE,UAAUoH,GACrBG,QAAS,CACL,eAAgB,sBAI3B/F,MAAK,SAAUuF,GACZ,OAAOA,EAAOC,YAlE9B,+BA4EI,WACI,OAAO,IAAIxG,SAAQ,SAAUC,EAASC,GAClCoG,MAAML,GACLjF,MAAK,SAAUuF,GACZ,OAAOA,EAAOC,UAEjBxF,MAAK,SAAUwF,GACZ,IACI,IAAIQ,EAA0B,GACZR,EACbvF,SAAQ,SAAUgG,GACnB,IAAIlI,EAAmB,IAAID,EAAQmI,GACnCD,EAAa5F,KAAKrC,MAEtBkB,EAAQ+G,GACV,MAAO3B,GACLnF,EAAOmF,OAGdD,OAAM,SAACuB,GACJrB,QAAQC,MAAMoB,EAAOnB,SACrBtF,EAAOyG,WAjGvB,iCA2GI,SAA2B/H,GAsBvB,YApBUL,GAANK,EACcoB,QAAQE,OAAO,2CAEf,IAAIF,SACd,SAASC,EAA0DC,GAC/DoG,MACIL,eAAerH,EACf,CACIiI,OAAQ,WAGf7F,MAAK,SAAUuF,GACZtG,EAAQsG,EAAOW,OAElB9B,OAAM,SAASG,GACZrF,EAAOqF,WA5H/B,iCAyII,SAA2B4B,GAoBvB,YAlBuB5I,GAAnB4I,EACcnH,QAAQE,OAAO,qCAGfoG,MACVL,eAAekB,EAAgBjG,QAC/B,CACI2F,OAAQ,MACRC,KAAMxH,KAAKE,UAAU2H,GACrBJ,QAAS,CACL,eAAgB,sBAI3B/F,MAAK,SAAUuF,GACZ,OAAOA,EAAOC,YA1J9B,8BA4KI,SAAwBzH,GACpBP,KAAK2H,eAAeiB,KAAKrI,KA7KjC,8BAmLI,WACI,OAAOP,KAAK2H,eAAekB,iBApLnC,wBAgMI,SAAkBC,GACd9I,KAAK6H,aAAae,KAAKE,KAjM/B,wBAuMI,WACI,OAAO9I,KAAK6H,aAAagB,mBAxMjC,KC8BeE,MA9Bf,WACI,IAKMC,EAAgB,CAAClH,eADD,IAAI4F,GAE5B,OACE,sBAAK1C,UAAU,iBAAf,UACI,qBAAKA,UAAU,MAAf,SACA,qBAAKA,UAAU,uBAAf,SACI,qBAAKA,UAAU,OAAf,SACA,qBAAKA,UAAU,YAAf,SACI,oBAAIA,UAAU,QAAd,6CAKR,sBAAKA,UAAU,WAAf,UACA,qBAAKA,UAAU,WAAf,SACI,cAAC,EAAD,eAAmBgE,MAEvB,qBAAKhE,UAAU,WAAf,SACI,cAAC,EAAD,eAAiBgE,aCnBdC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB3G,MAAK,YAAkD,IAA/C4G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c6689fc1.chunk.js","sourcesContent":["export class Option{\n\n    public value : string;\n    public label : string;\n\n    constructor(option:any){\n        if(option==undefined){\n            this.value = '0';\n            this.label = '';\n        }\n        else{\n            this.value = option.value;\n            this.label = option.label;\n        }        \n    }\n\n    public getValue():string{\n        return this.value;\n    }\n    public getLabel():string{\n        return this.label;\n    }\n}\n\nexport let optionDefault : Option = new Option({value:'0',label:''});","/**\n * It represents category data\n */\nexport class Category{\n\n    private id : string;\n    private name : string;\n\n    constructor(category : any){\n        if(category==undefined){\n            this.id='';\n            this.name='';\n        }\n        else{\n            this.id = category.id;\n            this.name = category.name;\n        }        \n    }\n\n    public getId(): string {\n        return this.id;\n    }\n    public setId(value: string) {\n        this.id = value;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n    public setName(value: string) {\n        this.name = value;\n    }\n}\n//export {Category}","import {Category} from './Category'\n\n/**\n * It represents product data\n */\nexport class Product{\n    private id: string;    \n    private name: string;    \n    private price: number;    \n    private createdAt: Date;    \n    private category: Category;    \n    private picture: string;    \n\n    constructor(product : any){\n        if(product==undefined){\n            this.id = '';\n            this.name = '';\n            this.price = 0.0;\n            this.createdAt = new Date();\n            this.category = new Category(undefined);\n            this.picture = '';\n        }else{\n            this.id = product.id;\n            this.name = product.name;\n            this.price = product.price;\n            this.createdAt = product.createdAt;\n            this.category = new Category(product.category);\n            this.picture = product.picture;\n        }        \n    }\n\n    public getId(): string {\n        return this.id;\n    }\n    public setId(value: string) {\n        this.id = value;\n    }\n    public getName(): string {\n        return this.name;\n    }\n    public setName(value: string) {\n        this.name = value;\n    }\n    public getPrice(): number {\n        return this.price;\n    }\n    public setPrice(value: number) {\n        this.price = value;\n    }\n    public getCreatedAt(): Date {\n        return this.createdAt;\n    }\n    public setCreatedAt(value: Date) {\n        this.createdAt = value;\n    }\n    public getCategory(): Category {\n        return this.category;\n    }\n    public setCategory(value: Category) {\n        this.category = value;\n    }\n    public getPicture(): string {\n        return this.picture;\n    }\n    public setPicture(value: string) {\n        this.picture = value;\n    }\n}","export function clone(something:any):any{\n    return JSON.parse(JSON.stringify(something));\n}\n\nexport abstract class MyDateToString{\n    constructor(){}\n    static dateToString(date:Date):string{\n        if(date==undefined)\n            return '';\n        return ddMMyyyy(date);\n        //return date.toString();\n    }\n    static dateToStringP(date:Date):Promise<string>{\n        return new Promise(function(resolve,reject){\n            resolve(date.toString());\n        });\n    }\n}\n\nexport function fourLastChars(bigString:string):string{\n    return bigString.substr(bigString.length-4,4);\n}\n\nfunction ddMMyyyy(date:Date):string{\n    if(date instanceof Date)\n        return date.getDay().toString()+'-'+date.getMonth().toString()+'-'+date.getFullYear().toString();\n    else\n        return '';\n}","import React from 'react';\nimport {Component} from 'react';\nimport Select, { ActionMeta, SingleValue } from 'react-select';\nimport { Option, optionDefault } from '../models/Option';\nimport { Category } from '../models/Category';\nimport { Product } from '../models/Product';\nimport { Service } from '../services/Service';\nimport { clone } from '../Utils';\n\ntype Props = {productService:Service};\ntype State = {loading : boolean, editing : boolean, categoriesOptions : Option[],\n    inputName : string, inputPrice : number, categoryOptionSelected : Option, formValid : boolean};\n\nexport default class ProductEditor extends Component<Props, State>{\n    private categories : Category[];\n    private productService : Service;\n    private product : Product;\n\n    constructor(props:Props){\n        super(props);\n        this.productService = props.productService;\n        this.categories = [];\n        this.product = new Product(undefined);\n        this.state = {\n            loading: true,\n            editing: false,\n            categoriesOptions : [],            \n            inputName : '',\n            inputPrice : 0,\n            categoryOptionSelected : optionDefault,\n            formValid : false\n        }\n    }\n    \n    componentDidMount(){\n        this.productService.serverGetCategories().then((categories : Category[]) => {\n            this.categories = categories;\n            let categoriesOptions : Option[] = [];\n            categories.forEach((category: Category)=>{\n                let option : Option = new Option({value:category.getId(), label:category.getName()});\n                categoriesOptions.push(option);\n            });\n            //update state\n            let state : any = clone(this.state);\n            state.categoriesOptions = categoriesOptions;\n            state.loading = false;\n            this.resetForm(this);\n            this.setState(state);\n        });\n        this.productService.getProductToEdit().subscribe((toEdit:Product)=>this.onEditProduct(toEdit,this));\n\n    }\n\n    private onEditProduct(toEdit:Product, myThis : this):void{\n        let state : any = clone(myThis.state);\n        let product : Product = myThis.product;\n        myThis.resetForm(myThis);\n        product.setId(toEdit.getId());\n        product.setName(toEdit.getName());\n        product.setCreatedAt(toEdit.getCreatedAt());\n        product.setPrice(toEdit.getPrice());\n        product.setCategory(toEdit.getCategory());\n        product.setPicture(toEdit.getPicture());\n        state.inputPrice=toEdit.getPrice();\n        state.inputName=toEdit.getName();\n        state.categoryOptionSelected=myThis.getOptionByValue(toEdit.getCategory().getId(),myThis);\n        state.formValid = true;\n        state.editing = true;\n        state.loading = false;\n        this.setState(state);\n    }\n\n    private resetForm(myThis:this):void{\n        let state : any = clone(myThis.state);\n        let product : Product = myThis.product;\n        product.setId('');\n        product.setName('');\n        product.setCreatedAt(new Date());\n        product.setPrice(0.0);\n        product.setPicture('');\n        product.setCategory(myThis.categories[0]);\n        state.inputPrice = 0;\n        state.inputName = '';\n        state.categoryOptionSelected = optionDefault;\n        state.formValid = false;\n        state.editing = false;\n        state.loading = false;\n        myThis.setState(state);\n    }\n\n    private getCategoryById(id:string):Category{\n        let category : Category | undefined = this.categories.find((category:Category)=>category.getId()==id);\n        if(category!=undefined)\n            return category;\n        return new Category(undefined);\n    }\n\n    private getOptionByValue(value:string, myThis:this):Option{\n        let option : Option | undefined = myThis.state.categoriesOptions.find((opti:Option)=>opti.value==value);\n        if(option!=undefined)\n            return option;\n        return optionDefault;\n    }\n\n    private onSelected(optionSelected: SingleValue<Option>, actionMeta: ActionMeta<Option>, myThis: this):void{\n        let selectedOp : Option = new Option(optionSelected);\n        let category : Category = myThis.getCategoryById(selectedOp.getValue());\n        let state : any = clone(myThis.state);\n        let product : Product = myThis.product;\n        if(category!=undefined)\n            product.setCategory(category);\n        state.categoryOptionSelected = optionSelected;\n        myThis.setState(state);\n    }\n\n    private onChangeField(event : React.ChangeEvent<HTMLInputElement>, myThis : this):void{\n        let state : any = clone(myThis.state);\n        let name : string = event.target.name;\n        let product : Product = myThis.product;\n        let value : string=event.target.value;\n        switch(name){\n            case 'nameName':\n                state.inputName=value;\n                product.setName(value);\n                break;\n            case 'namePrice':\n                let price : number = value.length>0?parseFloat(value):0;\n                state.inputPrice = price;\n                product.setPrice(price);\n                break;\n            default:\n        }        \n        state.formValid = (state.inputName.length>0) && (state.inputPrice>0.0);\n        myThis.setState(state);\n    }\n\n    private async submit(event :React.FormEvent<HTMLFormElement>, myThis : this):Promise<void>{\n        event.preventDefault();//to prevent refresh webpage after submit\n        let state = clone(myThis.state);\n        let product : Product = new Product(clone(myThis.product));\n        let price: number = myThis.state.inputPrice;\n        let name: string = myThis.state.inputName;\n        let categoryOptSel : Option = new Option(myThis.state.categoryOptionSelected);\n        let category: Category = myThis.getCategoryById(categoryOptSel.getValue());\n        product.setName(name);\n        product.setPrice(price);\n        product.setCategory(category);      \n        let responseJson;\n        if (myThis.state.editing) {\n            responseJson = await myThis.productService.serverUpdateProduct(product);\n        } else {\n            responseJson = await myThis.productService.serverAddProduct(product);\n        }\n        //console.log(responseJson);\n        myThis.resetForm(myThis);\n        //RX observer pattern\n        myThis.productService.setNewList(\n            await myThis.productService.serverGetProducts()\n        );\n    }\n\n    render(){\n        return(\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <h5 className=\"title mb-3\">\n                        <span>Product Editor</span>\n                        {this.state.loading && \n                            <div className=\"spinner-border float-end\" role=\"status\">\n                                <span className=\"visually-hidden\">loading...</span>\n                            </div>\n                        }\n                    </h5>\n                    <form onSubmit={e=>this.submit(e,this)}>\n                        <div className='form-group'>\n                            <label htmlFor='nameName'>Name</label>\n                            <input type='text' value={this.state.inputName} className='form-control' id='idName' \n                                data-testid='idName'\n                                onChange={e=>this.onChangeField(e,this)} name='nameName' required/>\n                        </div>\n                        <div className='form-group'>\n                            <label htmlFor='namePrice'>Price</label>\n                            <input type='number' value={this.state.inputPrice} className='form-control' id='idPrice' \n                                data-testid='idPrice'\n                                onChange={e=>this.onChangeField(e,this)} name='namePrice' max='200000' min='0' step='0.001'/>\n                        </div>\n                        <div className='form-group'>\n                            <label htmlFor='nameCategorySelector'>Category</label>\n                            <Select options={this.state.categoriesOptions}\n                                value={this.state.categoryOptionSelected}\n                                className='form-control' id='idCategorySelector' name='nameCategorySelector' \n                                data-testid='idCategorySelector'\n                                onChange={(option:SingleValue<Option>,action:ActionMeta<Option>)=>this.onSelected(option,action,this)}/>\n                        </div>                    \n                        <div className=\"d-grid gap-2\">\n                            <button className=\"btn btn-success btn-lg\" type=\"submit\" data-testid='idSubmitButton' id='idSubmitButton'\n                                disabled={!this.state.formValid}>\n                                    <i className=\"fas fa-database\" />\n                                    {this.state.editing ? 'savechanges': 'add'}\n                            </button>\n                        </div>\n                    </form>\n                </div>\n                </div>\n        );\n    }\n}","import React from 'react';\nimport {Component} from 'react';\nimport {FaPenSquare, FaTrash} from 'react-icons/fa';\nimport {Product} from '../models/Product';\nimport { Service } from '../services/Service';\nimport { fourLastChars, MyDateToString } from '../Utils';\n\ntype Props = {productService:Service};\ntype State = {productList:Product[]};\n\nexport default class ProductList extends Component<Props, State>{\n    private productService : Service;\n\n    constructor(props:Props){\n        super(props);\n        this.productService = props.productService;\n        this.state={\n            productList : []\n        }\n    }\n\n    componentDidMount(){\n        //ask the server for the list\n        this.getProductList(this);\n        //set up the refreshing process to update product list when ProductEditor notify changes with rxjs\n        this.productService.getNewList().subscribe((products:Product[])=>this.updateProductList(products,this));\n    }\n\n    private getProductList(myThis:this):void{\n        //ask the server for the list\n        this.productService.serverGetProducts().then((products:Product[])=>myThis.updateProductList(products,myThis));\n    }\n\n    private updateProductList(products:Product[], myThis : this):void{\n        myThis.setState({\n            productList: products\n        });\n    }\n\n    private clickEditCreditCard(productI : Product, myThis : this):void{\n        myThis.productService.addProductToEdit(productI);\n    }\n\n    private clickDeleteCreditCard(productI : Product, myThis : this):void{\n        let promiseResponseDelete = myThis.productService.serverDeleteProduct(productI.getId());\n        promiseResponseDelete.then( function(deleted:boolean): void {\n            if (deleted) {\n                myThis.getProductList(myThis);\n            }\n        })\n        .catch((error1: Error) => {\n            console.error(error1.message);\n        });\n    }\n\n    render(){\n        return (\n            <div className='card'>\n                <div className='card-body'>\n                    <h5 className='title'>Product List</h5>\n                    <table className='table'>\n                    <tbody data-testid='idTableProducts'>\n                        {this.state.productList.map((productI : Product, index : number) => (\n                            <tr key={'key'+index}>\n                                <td>{fourLastChars(productI.getId())}</td>\n                                <td>{productI.getName()}</td>\n                                <td>{productI.getPrice().toString()}</td>\n                                <td>{MyDateToString.dateToString(productI.getCreatedAt())}</td>\n                                <td>{productI.getCategory().getName()}</td>\n                                <td>{productI.getPicture()}</td>\n                                <td>\n                                    <FaPenSquare className='text-info' \n                                                data-testid={'edit' + index} onClick={() => {\n                                                this.clickEditCreditCard(productI, this);\n                                            }}/>\n                                    <FaTrash className='text-danger' \n                                                data-testid={'delete' + index} onClick={() => {\n                                                this.clickDeleteCreditCard(productI, this);\n                                            }}/>                                    \n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}","/**\n * css class string prefix for all fontawesome icon classes\n */\n export const iconClassBase: string = \"fas \";\n /**\n  * css class string for calendar fontawesome icon\n  */\n export const iconClassCalendar: string = \"fa-calendar-alt \";\n /**\n  * css class string for red fontawesome icon's color\n  */\n export const iconClassRed: string = \"text-danger \";\n /**\n  * css class string for green fontawesome icon's color\n  */\n export const iconClassGreen: string = \"text-success \";\n \n \n /**\n  * relative url path to getCreditCards REST service\n  */\n export const urlRESTAPI: string = '/api/client';\n\n export const debug: boolean = false;","import { Observable, Subject } from 'rxjs';\n\nimport { urlRESTAPI } from '../constants';\nimport { Category } from '../models/Category';\nimport { Product } from '../models/Product';\n\n/**\n * Service to make request calls to the server and implement observer pattern\n * to communicate components with each other\n */\nexport class ProductService {\n    /**\n     * observer pattern\n     * to communicate ProductEditor with ProductList\n     * when click in edit button\n     */\n    private productToEdit$ : Subject<Product> = new Subject<Product>();\n    /**\n     * observer pattern\n     * to communicate ProductEditor with ProductList\n     * when click in form's submit button of the ProductEditor\n     */\n    private productList$ : Subject<Product[]> = new Subject<Product[]>();\n\n    //----------SERVER FUNCTIONS----------\n    /**\n     * Request to the server to get the category list\n     * @returns promise of the request process with a category list if it succeeds\n     */\n     public serverGetCategories(): Promise<Category[]> {\n        return new Promise(function (resolve, reject): void {\n            fetch(urlRESTAPI+'/categories')\n            .then(function (answer): Promise<any> {\n                return answer.json();\n            })\n            .then(function (json: any): void {\n                try {\n                    let categoryList1: Category[] = [];\n                    let list: any[] = json;\n                    list.forEach(function (categoryJson: any): void {\n                        let category: Category = new Category(categoryJson);\n                        categoryList1.push(category);\n                    });\n                    resolve(categoryList1);\n                } catch (error1) {\n                    reject(error1);\n                }\n            })\n            .catch((error2: Error) => {\n                console.error(error2.message);\n                reject(error2);\n            });\n        });\n     }\n     \n    /**\n     * Request to the server to add a product to the list\n     * @param productToSave product to add\n     * @returns promise of the request process\n     */\n    public serverAddProduct(productToSave: Product): Promise<any> {        \n        let promiseJSON: Promise<any>;\n        if (productToSave == undefined) {\n            promiseJSON = Promise.reject(\"product to save cannot be empty\");\n        } else {\n            promiseJSON = fetch(\n                urlRESTAPI,\n                {\n                    method: 'POST',\n                    body: JSON.stringify(productToSave),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }\n            )\n            .then(function (answer): Promise<any> {\n                return answer.json();\n            });\n        }\n        return promiseJSON;\n    }\n\n    /**\n     * Request to the server to get the product list\n     * @returns promise of the request process with a product list if it succeeds\n     */\n    public serverGetProducts(): Promise<Product[]> {\n        return new Promise(function (resolve, reject): void {\n            fetch(urlRESTAPI)\n            .then(function (answer): Promise<any> {\n                return answer.json();\n            })\n            .then(function (json: any): void {\n                try {\n                    let productList1: Product[] = [];\n                    let list: any[] = json;\n                    list.forEach(function (productJson: any): void {\n                        let product: Product = new Product(productJson);\n                        productList1.push(product);\n                    });\n                    resolve(productList1);\n                } catch (error1) {\n                    reject(error1);\n                }\n            })\n            .catch((error2: Error) => {\n                console.error(error2.message);\n                reject(error2);\n            });\n        });\n    }\n\n    /**\n     * Request to the server to delete a product that is in the list\n     * @param id identifier of the productto delete\n     * @returns promise of the request process\n     */\n    public serverDeleteProduct(id: string): Promise<boolean> {\n        let promiseJSON: Promise<boolean>;\n        if (id == undefined) {\n            promiseJSON = Promise.reject(\"id of product to delete cannot be empty\");\n        } else {\n            promiseJSON = new Promise(\n                function(resolve: (value: boolean | PromiseLike<boolean>) => void, reject: (reason?: any)=>void) : void{\n                    fetch(\n                        urlRESTAPI+'/'+id,\n                        {\n                            method: 'DELETE'\n                        }\n                    )\n                    .then(function (answer:Response): void {\n                        resolve(answer.ok);\n                    })\n                    .catch(function(error:Error):void{\n                        reject(error);\n                    });\n                }\n            );\n        }\n        return promiseJSON;\n    }\n\n    /**\n     * Request to the server to update a product that is in the list\n     * @param productToUpdate identifier and product new data to update\n     * @returns promise of the request process\n     */\n    public serverUpdateProduct(productToUpdate: Product): Promise<any> {\n        let promiseJSON: Promise<any>;\n        if (productToUpdate == undefined) {\n            promiseJSON = Promise.reject('product to update cannot be empty');\n        }\n        else {\n            promiseJSON = fetch(\n                urlRESTAPI+'/'+productToUpdate.getId(),\n                {\n                    method: 'PUT',\n                    body: JSON.stringify(productToUpdate),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }\n            )\n            .then(function (answer:Response): Promise<any> {\n                return answer.json();\n            });\n        }\n        return promiseJSON;\n    }\n    //-------RX observer pattern--------\n    //----------RXjs FUNCTIONS----------\n    //EDIT PRODUCT\n    /**\n     * It is called from ProductList\n     * \n     * ProductEditor is subscribed to its updates\n     * \n     * When it updates ProductEditor\n     * enter edit mode and fill form with the data of the product \n     * to edit\n     * @param product is product to edit\n     */\n    public addProductToEdit(product: Product) : void {\n        this.productToEdit$.next(product);\n    }\n\n    /**\n     * ProductEditor uses it to subscribe to updates on productToEdit$\n     */\n    public getProductToEdit(): Observable<Product> {\n        return this.productToEdit$.asObservable();\n    }\n    //UPDATE LIST\n    /**\n     * It is called from ProductEditor when submit button is clicked\n     * \n     * ProductList is subscribed to its updates\n     * \n     * When it updates ProductList renders again the product list\n     * with the new product list data\n     * @param newProductList new product list to render\n     */\n    public setNewList(newProductList: Product[]) : void{\n        this.productList$.next(newProductList);\n    }\n\n    /**\n     * ProductList uses it to subscribe to updates on productList$\n     */\n    public getNewList(): Observable<Product[]> {\n        return this.productList$.asObservable();\n    }\n}\n\n\n","import React from 'react';\nimport './App.css';\n\nimport ProductEditor from './components/ProductEditor';\nimport ProductList from './components/ProductList';\nimport { ProductService } from './services/ProductService';\nimport { Service } from './services/Service';\nimport { ProductServiceDebug } from './services/ProductServiceDebug';\nimport { debug } from './constants';\n\nfunction App() {\n    let productService1 : Service;\n    if(debug)\n        productService1 = new ProductServiceDebug();\n    else\n        productService1 = new ProductService();\n    const myProps : any = {productService:productService1};\n  return (\n    <div className='container mt-5'>\n        <div className='row'>\n        <div className='col-lg-8 offset-lg-2'>\n            <div className='card'>\n            <div className='card-body'>\n                <h1 className='title'>Products in Dollars App</h1>\n            </div>\n            </div>\n        </div>\n        </div>\n        <div className='row mt-4'>\n        <div className='col-lg-6'>\n            <ProductEditor {...myProps}/>\n        </div>\n        <div className='col-lg-6'>\n            <ProductList {...myProps}/>\n        </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}